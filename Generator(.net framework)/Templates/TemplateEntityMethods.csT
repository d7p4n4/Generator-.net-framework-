using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace #namespaceName#
{
    public class #mainClassName#EntityMethods
    {
#findFirstBy#
        public static #className# findFirstBy#PropName#(#type# #propName#)
        {
            #className# #valueName# = null;

            using (var ctx = new #classContextName#())
            {
                var query = ctx.#contextPropName#
                                .Where(ss => ss.#propName# == #propName#)
                                .FirstOrDefault<#className#>();

                #valueName# = query;
            }
            return #valueName#;
        }

#findListBy#
        public static List<#className#> findListBy#PropName#(#type# #propName#)
        {
            List<#className#> #valueName# = new List<#className#>();

            using (var ctx = new #classContextName#())
            {
                var query = ctx.#contextPropName#
                                .Where(ss => ss.#propName# == #propName#).ToList();

                #valueName# = query;
            }
            return #valueName#;
        }

#exists#
	public Boolean existsIn#className#By#PropName#(#type# #propName#)
	{
		#className# #valueName# = null;

            using (var ctx = new #classContextName#())
            {
                var query = ctx.#contextPropName#
                                .Where(ss => ss.#propName# == #propName#)
                                .FirstOrDefault<#className#>();

                #valueName# = query;
            }
                if(#valueName# != null)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
#update#
		public void update#className#(#className# updated#className#)
        {
            using(var ctx = new #classContextName#())
            {
                var _#className# = ctx.#contextPropName#
				.Where(ss => ss.id == updated#className#.id).FirstOrDefault();
									  
                _#className#.#prop# = updated#className#.#prop#;
                ctx.SaveChanges();
            }
        }

#deleteById#
        public static void deleteById(#type# #propName#)
        {
            using (var ctx = new #classContextName#())
            {
                var query = ctx.#contextPropName#
                                .Remove(ctx.#contextPropName#.Single(ss => ss.#propName# == #propName#));

                ctx.SaveChanges();
            }
        }

#adds#
	public static void addNew#className#(#className# #valueName#)
	{
		using (var ctx = new #classContextName#())
            {
                ctx.#contextPropName#.Add(#valueName#);

                ctx.SaveChanges();
            }
	}
    }
}